service:
  name: letspoll

custom:
    accountId: AWS::AccountId
    documentation:
      # this is general info about the API
      api:
        info:
          version: '2'
          title: Example API
          description: Some example API
        tags:
          -
            name: Name
            description: The first tag
          -
            name: Tag2
            description: That other tag that we all love
      # Now we describe all the models that we use
      models:
        -
          name: Poll
          contentType: "application/json"
          schema :
              type: "object"
              required:
              - "pollOptions"
              - "pollQuestion"
              - "pollTitle"
              properties:
                pollId:
                  type: "string"
                pollTitle:
                  type: "string"
                pollQuestion:
                  type: "string"
                pollOptions:
                  type: "array"
                  items:
                    type: "string"

        -
          name: Polls
          contentType: "application/json"
          schema:
            type: "object"
            properties:
              polls:
                type: "array"
                items:
                  $ref: "{{model: Poll}}"
        -
          name: PollCreationRequest
          contentType: "application/json"
          schema:
            type: "object"
            required:
            - "createdBy"
            - "pollQuestion"
            - "pollTitle"
            properties:
              pollTitle:
                type: "string"
              pollQuestion:
                type: "string"
              createdBy:
                type: "string"
        -
          name: PollResponseRequest
          contentType: "application/json"
          schema:
            type: "object"
            required:
            - "polLResponse"
            - "pollId"
            - "respondentId"
            properties:
              pollId:
                type: "string"
              polLResponse:
                type: "string"
              respondentId:
                type: "string"
        -
          name: PollResponseStatistics
          contentType: "application/json"
          schema:
            type: "object"
            properties:
              response:
                type: "string"
              count:
                type: "integer"
              percentage:
                type: "number"
        -
          name: PollResponsesResultResponse
          contentType: "application/json"
          schema:
            type: "object"
            properties:
              pollId:
                type: "string"
              pollTitle:
                type: "string"
              pollQuestion:
                type: "string"
              responses:
                type: "array"
                items:
                  #$ref: "#/definitions/PollResponseStatistics"
                  $ref: "{{model: PollResponseStatistics}}"

        -
          name: Polls
          contentType: "application/json"
          schema:
            type: "object"
            properties:
              polls:
                type: "array"
                items:
                  $ref: "{{model: Poll}}"

        -
          name: RespondentRegistrationRequest
          contentType: "application/json"
          schema:
            type: "object"
            required:
              - "token"
              - "emailId"
              - "displayName"
            properties:
              token:
                type: "string"
              emailId:
                type: "string"
              displayName:
                type: "string"
        -
          name: RespondentRegistrationResponse
          contentType: "application/json"
          schema:
            type: "object"
            properties:
              letsPollRespondentId:
                type: "string"
              letsPollToken:
                type: "string"
    commonModelSchemaFragments:
      # defining common fragments means you can reference them with a single line
      BadRequestJSON:
        statusCode: '400'
        responseModels:
          "application/json": "BadRequestJSON"

      NotFoundJson:
        statusCode: '404'
        responseModels:
          "application/json": "NotFoundJSON"

      ConflictJSON:
        statusCode: '409'
        responseModels:
          "application/json": "ConflictJSON"

frameworkVersion: ">=1.0.0 <2.0.0"


plugins:
  - serverless-cf-vars
  - serverless-aws-documentation

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage,'beta'} # Set the default stage used. Default is dev
  region: ${opt:region,'ap-south-1'} # Overwrite the default region used. Default is us-east-1
  profile: ${opt:profile,'lets-poll-default'}
# The "Resources" your "Functions" use.  Raw AWS CloudFormation goes in here.
resources:
  - ${file(./resources/vpc.yml)}
  #- ${file(./resources/rds.yml)}
  - ${file(./resources/cognito.yml)}
  - ${file(./resources/lambdaExecutionRole.yml)}
  - ${file(./resources/lambdaBasicExecutionPolicy.yml)}
  - ${file(./resources/lambdaVpcPolicy.yml)}
  - ${file(./resources/api.yml)}
  - ${file(./resources/kms.yml)}


package:
  artifact: build/distributions/letsPollAPI.zip

functions:
  - ${file(./resources/functions/pollsGetter.yml)}
  - ${file(./resources/functions/pollsCreator.yml)}
  - ${file(./resources/functions/pollGetter.yml)}


#Outputs:
#    letsPollVPCID:
#      Description: The VPC id for LetsPoll VPC
#      Value:
#        Ref: letsPollVPC
#      Export:
#        Name: ${self:service}:letsPollVPCId # see Fn::ImportValue to use in other services and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.

#    letsPollIGWID:
#      Description: The VPC id for LetsPoll VPC
#      Value:
#        Ref: letsPollIGW
#      Export:
#        Name: ${self:service}:letsPollIGWId # see Fn::ImportValue to use in other services and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.
